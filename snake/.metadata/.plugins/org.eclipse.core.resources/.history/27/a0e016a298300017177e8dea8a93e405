package com.snake;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.LinkedList;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JPanel;

public class SnakeJPanel extends JPanel implements ActionListener,KeyListener{
	JButton startButton=new JButton("开始");
	JButton exitButton=new JButton("退出");
	int fenshu=0;
	int speed=1;
	Point food;
	Random ran=new Random();
	boolean start=false;
	LinkedList<Point> snake=new LinkedList<Point>();
	
	public SnakeJPanel() {
		super();
		setLayout(new FlowLayout(FlowLayout.LEFT));
		startButton.addActionListener(this);
		exitButton.addActionListener(this);
		addKeyListener(this);
		add(startButton);
		add(exitButton);
	}

	@Override
	public void paint(Graphics g) {
		// TODO Auto-generated method stub
		super.paint(g);
		g.drawRect(15, 40, 400, 300);
		g.drawString("分数："+fenshu, 150, 25);
		g.drawString("速度："+speed, 250, 25);
		
		if(start){
		g.setColor(Color.red);
		g.fillRect(food.x*10+15, food.y*10+40, 10, 10);
		
		g.setColor(Color.green);
		for(Point p:snake){
			g.fill3DRect(p.x*10+15, p.y*10+40, 10, 10,true);
		}
		
		}
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource().equals(exitButton)){
			System.exit(0);
		}
		
		if(e.getSource().equals(startButton)){
			start=true;
			startButton.setEnabled(false);
			food=new Point(ran.nextInt(40),ran.nextInt(30));
			Point p=new Point(20,20);
			snake.add(p);
			requestFocus(true);
			repaint();
		}
		
		
	}
	
	public boolean fanwei(int x,int y){
		if(x<0||x>=40||y<0||y>=30){
			return false;
		}
		return true;
	}
	
	public boolean nextFanwei(int x,int y){
		if(!fanwei(snake.get(0).x+x,snake.get(0).y+y)){
			return false;
		}
		return true;
	}

	
	public void move(int x,int y){
		if(nextFanwei(x, y)){
		snake.get(0).x+=x;
		snake.get(0).y+=y;}
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		switch(e.getKeyCode()){
		case KeyEvent.VK_UP:move(0,-1);break;
		case KeyEvent.VK_DOWN:move(0,1);break;
		case KeyEvent.VK_LEFT:move(-1,0);break;
		case KeyEvent.VK_RIGHT:move(1,0);break;
	}
	repaint();
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
}
